// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  gender Gender
  birthDate DateTime
  deathDate DateTime?
  bio String?
  profilePictureUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  relationships Relationship[] @relation("personRelation")
  relatedRelationships Relationship[] @relation("relatedPersonRelation")
  memberOfFamilies FamilyMember[]

  @@map("persons")
}

enum Gender {
  MAN
  WOMAN
}

model Relationship {
  id String @id @default(uuid())
  person Person @relation(fields: [personId], references: [id], name: "personRelation", onDelete: Cascade)
  personId String
  relatedPerson Person @relation(fields: [relatedPersonId], references: [id], name: "relatedPersonRelation", onDelete: Cascade)
  relatedPersonId String
  type RelationshipType
  startDate DateTime?
  endDate DateTime?

  @@unique([personId, relatedPersonId, type])
  @@map("relationships")
}

enum RelationshipType {
  PARENT
  CHILD
  SPOUSE
}

model Family {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  familyMembers FamilyMember[]

  @@map("families")
}

model FamilyMember {
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId String
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String 
  role FamilyMemberRole

  @@id([familyId, personId])
  @@map("family_members")
}

enum FamilyMemberRole {
  FATHER
  MOTHER
  CHILD
}